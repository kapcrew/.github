name: –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ (–±–µ–∑ –∫–æ–º–º–∏—Ç–æ–≤)

on:
  workflow_dispatch:
    inputs:
      source_iteration:
        description: '–ù–æ–º–µ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 133). –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è'
        required: false
        type: string
      target_iteration:
        description: '–ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 136). –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è'
        required: false
        type: string
      add_comment:
        description: '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º?'
        required: false
        type: boolean
        default: true
  
  schedule:
    - cron: '*/5 * * * *'  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

jobs:
  move-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –≤ Projects
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏–∑ Repository Variable
            async function getCurrentIteration() {
              try {
                const { data } = await github.rest.actions.getRepoVariable({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'CURRENT_ITERATION'
                });
                return parseInt(data.value);
              } catch (error) {
                console.log('‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CURRENT_ITERATION –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                return 136; // TODO: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
              }
            }
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            async function updateCurrentIteration(newValue) {
              try {
                await github.rest.actions.updateRepoVariable({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'CURRENT_ITERATION',
                  value: newValue.toString()
                });
                console.log(`üíæ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CURRENT_ITERATION –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${newValue}`);
                return true;
              } catch (error) {
                if (error.status === 404) {
                  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
                  try {
                    await github.rest.actions.createRepoVariable({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      name: 'CURRENT_ITERATION',
                      value: newValue.toString()
                    });
                    console.log(`‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CURRENT_ITERATION —Å–æ–∑–¥–∞–Ω–∞: ${newValue}`);
                    return true;
                  } catch (createError) {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: ${createError.message}`);
                    return false;
                  }
                } else {
                  console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: ${error.message}`);
                  return false;
                }
              }
            }
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
            function normalizeIterationName(input) {
              if (!input) return null;
              if (/^\d+$/.test(input.trim())) {
                return `Iterations ${input.trim()}`;
              }
              return input.trim();
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
            const isScheduled = context.eventName === 'schedule';
            const currentIterationNum = await getCurrentIteration();
            
            let sourceIterationName, targetIterationName, addComment;
            
            if (isScheduled) {
              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
              const sourceNum = currentIterationNum;
              const targetNum = currentIterationNum + 1;
              
              sourceIterationName = normalizeIterationName(sourceNum.toString());
              targetIterationName = normalizeIterationName(targetNum.toString());
              addComment = true;
              
              console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é');
              console.log(`üìä –¢–µ–∫—É—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: ${sourceNum}`);
            } else {
              // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
              const sourceInput = '${{ github.event.inputs.source_iteration }}';
              const targetInput = '${{ github.event.inputs.target_iteration }}';
              
              if (!sourceInput && !targetInput) {
                const sourceNum = currentIterationNum;
                const targetNum = currentIterationNum + 1;
                
                sourceIterationName = normalizeIterationName(sourceNum.toString());
                targetIterationName = normalizeIterationName(targetNum.toString());
                
                console.log('üë§ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∏—Ç–µ—Ä–∞—Ü–∏–π');
                console.log(`üìä –¢–µ–∫—É—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: ${sourceNum}`);
              } else {
                sourceIterationName = normalizeIterationName(sourceInput);
                targetIterationName = normalizeIterationName(targetInput);
                
                console.log('üë§ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏');
              }
              
              addComment = '${{ github.event.inputs.add_comment }}' === 'true';
            }
            
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á –≤ Projects');
            console.log(`üì§ –ò—Å—Ç–æ—á–Ω–∏–∫: "${sourceIterationName}"`);
            console.log(`üì• –¶–µ–ª—å: "${targetIterationName}"`);
            console.log('---');
            
            const projectNumber = 3; // TODO: –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞
            const owner = context.repo.owner;
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
            async function getAllProjectItems(projectId) {
              let allItems = [];
              let hasNextPage = true;
              let cursor = null;
              
              while (hasNextPage) {
                const query = `
                  query($projectId: ID!, $cursor: String) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 100, after: $cursor) {
                          pageInfo {
                            hasNextPage
                            endCursor
                          }
                          nodes {
                            id
                            content {
                              ... on Issue {
                                number
                                title
                                url
                                state
                              }
                            }
                            fieldValues(first: 20) {
                              nodes {
                                ... on ProjectV2ItemFieldIterationValue {
                                  field {
                                    ... on ProjectV2IterationField {
                                      id
                                      name
                                    }
                                  }
                                  iterationId
                                  title
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const result = await github.graphql(query, {
                  projectId: projectId,
                  cursor: cursor
                });
                
                const items = result.node.items.nodes;
                allItems = allItems.concat(items);
                
                hasNextPage = result.node.items.pageInfo.hasNextPage;
                cursor = result.node.items.pageInfo.endCursor;
              }
              
              return allItems;
            }
            
            // GraphQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
            const projectQuery = `
              query($owner: String!, $number: Int!) {
                organization(login: $owner) {
                  projectV2(number: $number) {
                    id
                    title
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2IterationField {
                          id
                          name
                          configuration {
                            iterations {
                              id
                              title
                            }
                            completedIterations {
                              id
                              title
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            let projectData;
            try {
              projectData = await github.graphql(projectQuery, {
                owner: owner,
                number: projectNumber
              });
            } catch (error) {
              core.setFailed(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
              return;
            }
            
            const project = projectData.organization.projectV2;
            const iterationField = project.fields.nodes.find(field => field.name === 'Iterations');
            
            if (!iterationField) {
              core.setFailed('‚ùå –ü–æ–ª–µ "Iterations" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ');
              return;
            }
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: ${project.title}`);
            
            const activeIterations = iterationField.configuration.iterations || [];
            const completedIterations = iterationField.configuration.completedIterations || [];
            const allIterations = [...activeIterations, ...completedIterations];
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: ${allIterations.length}`);
            
            const sourceIteration = allIterations.find(i => i.title === sourceIterationName);
            const targetIteration = allIterations.find(i => i.title === targetIterationName);
            
            if (!sourceIteration) {
              core.setFailed(`‚ùå –ò—Ç–µ—Ä–∞—Ü–∏—è "${sourceIterationName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
              return;
            }
            
            if (!targetIteration) {
              core.setFailed(`‚ùå –ò—Ç–µ—Ä–∞—Ü–∏—è "${targetIterationName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
              return;
            }
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏—Å—Ö–æ–¥–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è: ${sourceIteration.title}`);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è: ${targetIteration.title}`);
            console.log('---');
            
            console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞...');
            const allItems = await getAllProjectItems(project.id);
            console.log(`üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${allItems.length}`);
            
            const itemsToMove = allItems.filter(item => {
              if (!item.content) return false;
              if (item.content.state === 'CLOSED') return false;
              
              const iterationValue = item.fieldValues.nodes.find(fv => 
                fv.field?.name === 'Iterations' && fv.iterationId
              );
              
              if (!iterationValue) return false;
              return iterationValue.iterationId === sourceIteration.id;
            });
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞: ${itemsToMove.length}`);
            
            if (itemsToMove.length === 0) {
              console.log('‚ú® –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞');
              return;
            }
            
            console.log('---');
            
            let movedCount = 0;
            const movedIssues = [];
            
            const updateMutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $iterationId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: {iterationId: $iterationId}
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            
            for (const item of itemsToMove) {
              try {
                const issue = item.content;
                
                await github.graphql(updateMutation, {
                  projectId: project.id,
                  itemId: item.id,
                  fieldId: iterationField.id,
                  iterationId: targetIteration.id
                });
                
                if (addComment) {
                  try {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      body: `üîÑ –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ –∏—Ç–µ—Ä–∞—Ü–∏–∏ **"${sourceIterationName}"** –≤ **"${targetIterationName}"**\n\n_–î–∞—Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞: ${new Date().toLocaleString('ru-RU')}_`
                    });
                  } catch (commentError) {
                    console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ #${issue.number}`);
                  }
                }
                
                movedCount++;
                movedIssues.push({
                  number: issue.number,
                  title: issue.title,
                  url: issue.url
                });
                console.log(`‚úÖ #${issue.number}: ${issue.title}`);
                
              } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ #${item.content?.number}: ${error.message}`);
              }
            }
            
            console.log('---');
            console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${movedCount} –∑–∞–¥–∞—á`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
            if (movedCount > 0) {
              const targetIterationNumber = parseInt(targetIterationName.replace(/\D/g, ''));
              
              if (targetIterationNumber) {
                await updateCurrentIteration(targetIterationNumber);
                console.log(`‚úÖ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ${targetIterationNumber} ‚Üí ${targetIterationNumber + 1}`);
              }
            }
            
            console.log('üéâ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!');
