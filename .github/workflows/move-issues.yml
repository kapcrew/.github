name: –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ (Projects)

on:
  workflow_dispatch:
    inputs:
      source_iteration:
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Iterations 133)'
        required: true
        type: string
      target_iteration:
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Iterations 136)'
        required: true
        type: string
      add_comment:
        description: '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º?'
        required: false
        type: boolean
        default: true
  
  schedule:
    - cron: '*/5 * * * *'  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

jobs:
  move-issues:
    runs-on: ubuntu-latest
    
    steps:
      - name: –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –≤ Projects
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ workflow –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            const isScheduled = context.eventName === 'schedule';
            
            let sourceIterationName, targetIterationName, addComment;
            
            if (isScheduled) {
              // –ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–ø—É—Å–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              // –í–ê–ñ–ù–û: —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π –∑–¥–µ—Å—å
              sourceIterationName = 'Iterations 135';  // TODO: –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
              targetIterationName = 'Iterations 136';  // TODO: –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
              addComment = true;
              
              console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é');
            } else {
              // –ü—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
              sourceIterationName = '${{ github.event.inputs.source_iteration }}';
              targetIterationName = '${{ github.event.inputs.target_iteration }}';
              addComment = '${{ github.event.inputs.add_comment }}' === 'true';
              
              console.log('üë§ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫');
            }
            
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á –≤ Projects');
            console.log(`üì§ –ò—Å—Ç–æ—á–Ω–∏–∫: "${sourceIterationName}"`);
            console.log(`üì• –¶–µ–ª—å: "${targetIterationName}"`);
            console.log('---');
            
            // GraphQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
            const projectQuery = `
              query($owner: String!, $number: Int!) {
                organization(login: $owner) {
                  projectV2(number: $number) {
                    id
                    title
                    field(name: "Iterations") {
                      ... on ProjectV2IterationField {
                        id
                        name
                        configuration {
                          iterations {
                            id
                            title
                            startDate
                          }
                        }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                            title
                            url
                            state
                          }
                        }
                        iterationValue: fieldValueByName(name: "Iterations") {
                          ... on ProjectV2ItemFieldIterationValue {
                            iterationId
                            title
                          }
                        }
                        statusValue: fieldValueByName(name: "Status") {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, Projects/1)
            // –í–ê–ñ–ù–û: –∑–∞–º–µ–Ω–∏—Ç–µ "1" –Ω–∞ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            const projectNumber = 3; // TODO: –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞
            const owner = context.repo.owner;
            
            let projectData;
            try {
              projectData = await github.graphql(projectQuery, {
                owner: owner,
                number: projectNumber
              });
            } catch (error) {
              core.setFailed(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
              return;
            }
            
            const project = projectData.organization.projectV2;
            const iterationField = project.field;
            
            if (!iterationField) {
              core.setFailed('‚ùå –ü–æ–ª–µ "Iterations" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ');
              return;
            }
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: ${project.title}`);
            
            // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏
            const iterations = iterationField.configuration.iterations;
            const sourceIteration = iterations.find(i => i.title === sourceIterationName);
            const targetIteration = iterations.find(i => i.title === targetIterationName);
            
            if (!sourceIteration) {
              core.setFailed(`‚ùå –ò—Ç–µ—Ä–∞—Ü–∏—è "${sourceIterationName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
              console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏:', iterations.map(i => i.title).join(', '));
              return;
            }
            
            if (!targetIteration) {
              core.setFailed(`‚ùå –ò—Ç–µ—Ä–∞—Ü–∏—è "${targetIterationName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
              console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏:', iterations.map(i => i.title).join(', '));
              return;
            }
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏—Å—Ö–æ–¥–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è: ${sourceIteration.title}`);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è: ${targetIteration.title}`);
            console.log('---');
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            const itemsToMove = project.items.nodes.filter(item => {
              if (!item.content) return false; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
              if (item.content.state === 'CLOSED') return false; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ
              
              const iterationValue = item.iterationValue;
              if (!iterationValue || !iterationValue.iterationId) return false;
              
              return iterationValue.iterationId === sourceIteration.id;
            });
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞: ${itemsToMove.length}`);
            
            if (itemsToMove.length === 0) {
              console.log('‚ú® –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞');
              return;
            }
            
            console.log('---');
            
            let movedCount = 0;
            let errorCount = 0;
            const movedIssues = [];
            
            // Mutation –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
            const updateMutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $iterationId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: {iterationId: $iterationId}
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            
            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
            for (const item of itemsToMove) {
              try {
                const issue = item.content;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é
                await github.graphql(updateMutation, {
                  projectId: project.id,
                  itemId: item.id,
                  fieldId: iterationField.id,
                  iterationId: targetIteration.id
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ issue (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                if (addComment) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: `üîÑ –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ –∏—Ç–µ—Ä–∞—Ü–∏–∏ **"${sourceIterationName}"** –≤ **"${targetIterationName}"**\n\n_–î–∞—Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞: ${new Date().toLocaleString('ru-RU')}_`
                  });
                }
                
                movedCount++;
                movedIssues.push({
                  number: issue.number,
                  title: issue.title,
                  url: issue.url
                });
                console.log(`‚úÖ #${issue.number}: ${issue.title}`);
                
              } catch (error) {
                errorCount++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ #${item.content?.number}: ${error.message}`);
              }
            }
            
            console.log('---');
            console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–Ω–æ—Å–∞:`);
            console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: ${movedCount}`);
            console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
            console.log(`   üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${itemsToMove.length}`);
            
            // –°–æ–∑–¥–∞–µ–º issue —Å –æ—Ç—á–µ—Ç–æ–º
            if (movedCount > 0) {
              let reportBody = `## üìã –û—Ç—á–µ—Ç –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–¥–∞—á\n\n`;
              reportBody += `**–ò—Å—Ç–æ—á–Ω–∏–∫:** ${sourceIterationName}\n`;
              reportBody += `**–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:** ${targetIterationName}\n`;
              reportBody += `**–î–∞—Ç–∞:** ${new Date().toLocaleString('ru-RU')}\n\n`;
              reportBody += `### ‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑–∞–¥–∞—á: ${movedCount}\n\n`;
              
              for (const issue of movedIssues) {
                reportBody += `- #${issue.number} - [${issue.title}](${issue.url})\n`;
              }
              
              if (errorCount > 0) {
                reportBody += `\n### ‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ: ${errorCount}\n`;
              }
              
              try {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `üîÑ –û—Ç—á–µ—Ç: ${sourceIterationName} ‚Üí ${targetIterationName}`,
                  body: reportBody,
                  labels: ['automation', 'report']
                });
                console.log('üìù –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –æ –ø–µ—Ä–µ–Ω–æ—Å–µ');
              } catch (error) {
                console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç: ${error.message}`);
              }
            }
            
            console.log('---');
            console.log('üéâ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!');
