name: Перенос задач между итерациями (Projects)

on:
  workflow_dispatch:
    inputs:
      source_iteration:
        description: 'Название предыдущей итерации (например: Iterations 133)'
        required: true
        type: string
      target_iteration:
        description: 'Название текущей итерации (например: Iterations 136)'
        required: true
        type: string
      add_comment:
        description: 'Добавить комментарий к перенесенным задачам?'
        required: false
        type: boolean
        default: true

jobs:
  move-issues:
    runs-on: ubuntu-latest
    
    steps:
      - name: Перенос задач между итерациями в Projects
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const sourceIterationName = '${{ github.event.inputs.source_iteration }}';
            const targetIterationName = '${{ github.event.inputs.target_iteration }}';
            const addComment = '${{ github.event.inputs.add_comment }}' === 'true';
            
            console.log('🚀 Начинаем перенос задач в Projects');
            console.log(`📤 Источник: "${sourceIterationName}"`);
            console.log(`📥 Цель: "${targetIterationName}"`);
            console.log('---');
            
            const projectNumber = 3; // TODO: изменить на ваш номер проекта
            const owner = context.repo.owner;
            
            // Функция для получения всех элементов проекта с пагинацией
            async function getAllProjectItems(projectId, iterationFieldId) {
              let allItems = [];
              let hasNextPage = true;
              let cursor = null;
              
              while (hasNextPage) {
                const query = `
                  query($projectId: ID!, $cursor: String) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 100, after: $cursor) {
                          pageInfo {
                            hasNextPage
                            endCursor
                          }
                          nodes {
                            id
                            content {
                              ... on Issue {
                                number
                                title
                                url
                                state
                              }
                            }
                            fieldValues(first: 20) {
                              nodes {
                                ... on ProjectV2ItemFieldIterationValue {
                                  field {
                                    ... on ProjectV2IterationField {
                                      id
                                      name
                                    }
                                  }
                                  iterationId
                                  title
                                  startDate
                                }
                                ... on ProjectV2ItemFieldSingleSelectValue {
                                  field {
                                    ... on ProjectV2SingleSelectField {
                                      id
                                      name
                                    }
                                  }
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const result = await github.graphql(query, {
                  projectId: projectId,
                  cursor: cursor
                });
                
                const items = result.node.items.nodes;
                allItems = allItems.concat(items);
                
                hasNextPage = result.node.items.pageInfo.hasNextPage;
                cursor = result.node.items.pageInfo.endCursor;
                
                console.log(`📥 Загружено элементов: ${allItems.length}`);
              }
              
              return allItems;
            }
            
            // GraphQL запрос для получения информации о проекте
            // ИСПРАВЛЕНО: увеличено количество загружаемых итераций до 50
            const projectQuery = `
              query($owner: String!, $number: Int!) {
                organization(login: $owner) {
                  projectV2(number: $number) {
                    id
                    title
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2IterationField {
                          id
                          name
                          configuration {
                            iterations {
                              id
                              title
                              startDate
                              duration
                            }
                            completedIterations {
                              id
                              title
                              startDate
                              duration
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            let projectData;
            try {
              projectData = await github.graphql(projectQuery, {
                owner: owner,
                number: projectNumber
              });
            } catch (error) {
              core.setFailed(`❌ Ошибка получения данных проекта: ${error.message}`);
              return;
            }
            
            const project = projectData.organization.projectV2;
            
            // Находим поле Iterations
            const iterationField = project.fields.nodes.find(field => field.name === 'Iterations');
            
            if (!iterationField) {
              core.setFailed('❌ Поле "Iterations" не найдено в проекте');
              return;
            }
            
            console.log(`✅ Найден проект: ${project.title}`);
            
            // ИСПРАВЛЕНО: объединяем активные и завершенные итерации
            const activeIterations = iterationField.configuration.iterations || [];
            const completedIterations = iterationField.configuration.completedIterations || [];
            const allIterations = [...activeIterations, ...completedIterations];
            
            console.log(`📊 Найдено итераций: ${allIterations.length}`);
            console.log(`   - Активных: ${activeIterations.length}`);
            console.log(`   - Завершенных: ${completedIterations.length}`);
            
            // Выводим все доступные итерации для отладки
            console.log('📋 Доступные итерации:');
            allIterations.forEach(iter => {
              console.log(`   - "${iter.title}" (ID: ${iter.id.substring(iter.id.length - 8)})`);
            });
            console.log('---');
            
            // Находим нужные итерации
            const sourceIteration = allIterations.find(i => i.title === sourceIterationName);
            const targetIteration = allIterations.find(i => i.title === targetIterationName);
            
            if (!sourceIteration) {
              core.setFailed(`❌ Итерация "${sourceIterationName}" не найдена`);
              console.log('💡 Проверьте точное название (с учетом регистра и пробелов)');
              return;
            }
            
            if (!targetIteration) {
              core.setFailed(`❌ Итерация "${targetIterationName}" не найдена`);
              console.log('💡 Проверьте точное название (с учетом регистра и пробелов)');
              return;
            }
            
            console.log(`✅ Найдена исходная итерация: ${sourceIteration.title}`);
            console.log(`✅ Найдена целевая итерация: ${targetIteration.title}`);
            console.log('---');
            
            // Получаем все элементы проекта
            console.log('📥 Загружаем все элементы проекта...');
            const allItems = await getAllProjectItems(project.id, iterationField.id);
            console.log(`📊 Всего элементов в проекте: ${allItems.length}`);
            console.log('---');
            
            // Фильтруем задачи из исходной итерации
            const itemsToMove = allItems.filter(item => {
              if (!item.content) return false; // пропускаем пустые элементы
              if (item.content.state === 'CLOSED') return false; // пропускаем закрытые
              
              // Ищем значение поля итерации
              const iterationValue = item.fieldValues.nodes.find(fv => 
                fv.field?.name === 'Iterations' && fv.iterationId
              );
              
              if (!iterationValue) return false;
              
              return iterationValue.iterationId === sourceIteration.id;
            });
            
            console.log(`📊 Найдено задач для переноса: ${itemsToMove.length}`);
            
            // Выводим информацию о найденных задачах
            if (itemsToMove.length > 0) {
              console.log('📋 Список задач для переноса:');
              itemsToMove.forEach(item => {
                const iterationValue = item.fieldValues.nodes.find(fv => 
                  fv.field?.name === 'Iterations'
                );
                console.log(`   - #${item.content.number}: ${item.content.title} (итерация: ${iterationValue?.title})`);
              });
            }
            
            if (itemsToMove.length === 0) {
              console.log('✨ Нет задач для переноса');
              return;
            }
            
            console.log('---');
            
            let movedCount = 0;
            let errorCount = 0;
            const movedIssues = [];
            const errors = [];
            
            // Mutation для обновления поля итерации
            const updateMutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $iterationId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: {iterationId: $iterationId}
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            
            // Переносим каждую задачу
            for (const item of itemsToMove) {
              try {
                const issue = item.content;
                
                // Обновляем итерацию
                await github.graphql(updateMutation, {
                  projectId: project.id,
                  itemId: item.id,
                  fieldId: iterationField.id,
                  iterationId: targetIteration.id
                });
                
                // Добавляем комментарий к issue (если включено)
                if (addComment) {
                  try {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      body: `🔄 Задача автоматически перенесена из итерации **"${sourceIterationName}"** в **"${targetIterationName}"**\n\n_Дата переноса: ${new Date().toLocaleString('ru-RU')}_`
                    });
                  } catch (commentError) {
                    console.log(`⚠️  Не удалось добавить комментарий к #${issue.number}: ${commentError.message}`);
                  }
                }
                
                movedCount++;
                movedIssues.push({
                  number: issue.number,
                  title: issue.title,
                  url: issue.url
                });
                console.log(`✅ #${issue.number}: ${issue.title}`);
                
              } catch (error) {
                errorCount++;
                const errorMsg = `#${item.content?.number}: ${error.message}`;
                errors.push(errorMsg);
                console.error(`❌ Ошибка при переносе ${errorMsg}`);
              }
            }
            
            console.log('---');
            console.log(`📈 Результаты переноса:`);
            console.log(`   ✅ Успешно перенесено: ${movedCount}`);
            console.log(`   ❌ Ошибок: ${errorCount}`);
            console.log(`   📊 Всего обработано: ${itemsToMove.length}`);
            
            if (errors.length > 0) {
              console.log('\n⚠️  Детали ошибок:');
              errors.forEach(err => console.log(`   - ${err}`));
            }
            
            // Создаем issue с отчетом
            if (movedCount > 0) {
              let reportBody = `## 📋 Отчет о переносе задач\n\n`;
              reportBody += `**Источник:** ${sourceIterationName}\n`;
              reportBody += `**Назначение:** ${targetIterationName}\n`;
              reportBody += `**Дата:** ${new Date().toLocaleString('ru-RU')}\n\n`;
              reportBody += `### ✅ Перенесено задач: ${movedCount}\n\n`;
              
              for (const issue of movedIssues) {
                reportBody += `- #${issue.number} - [${issue.title}](${issue.url})\n`;
              }
              
              if (errorCount > 0) {
                reportBody += `\n### ⚠️ Ошибок при переносе: ${errorCount}\n\n`;
                errors.forEach(err => {
                  reportBody += `- ${err}\n`;
                });
              }
              
              try {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `🔄 Отчет: ${sourceIterationName} → ${targetIterationName}`,
                  body: reportBody,
                  labels: ['automation', 'report']
                });
                console.log('📝 Создан отчет о переносе');
              } catch (error) {
                console.error(`⚠️ Не удалось создать отчет: ${error.message}`);
              }
            }
            
            console.log('---');
            console.log('🎉 Перенос завершен!');
